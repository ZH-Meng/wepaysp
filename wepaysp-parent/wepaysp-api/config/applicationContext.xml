<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx 
     	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     	http://www.springframework.org/schema/aop 
     	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     	http://www.springframework.org/schema/util 
     	http://www.springframework.org/schema/util/spring-util-3.0.xsd
     	http://www.springframework.org/schema/context 
     	http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">	
		   	<list>	
		    	<value>config/config.properties</value>
		    	<value>config/config-db.properties</value>
		   </list>	
		</property>
	</bean>

	<!--MySQL -->
	<!-- 	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${driverClass}" />
		<property name="jdbcUrl" value="${jdbcUrl}" />
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/wepay_sp?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" />
		<property name="user" value="${user}" />
		<property name="password" value="${password}" />
		<property name="initialPoolSize" value="${initialPoolSize}" />
		<property name="minPoolSize" value="${minPoolSize}" />
		<property name="maxPoolSize" value="${maxPoolSize}" />
		<property name="maxIdleTime" value="${maxIdleTime}" />
		<property name="acquireIncrement" value="${acquireIncrement}" />
	</bean> -->
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        <!-- 驱动名称 -->    
        <property name="driverClassName" value="${db.driverClass}" />    
        <!-- JDBC连接串     -->
        <property name="url" value="${db.jdbcUrl}" />    
        <!--  数据库用户名称 -->    
        <property name="username" value="${db.userName}" />    
        <!-- 数据库密码 -->    
        <property name="password" value="${db.password}" />    
        <!-- 连接池最大使用连接数量 -->    
        <property name="maxActive" value="${db.maxActive}" />    
        <!-- 初始化大小 -->    
        <property name="initialSize" value="${db.initialSize}" />  
        <!-- 获取连接最大等待时间  -->   
        <property name="maxWait" value="${db.maxWait}" />    
        <!-- 逐出连接的检测时间间隔 -->    
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"/>
        <!-- 最小逐出时间     -->
        <!--  配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/> 
        <!-- 打开removeAbandoned功能   -->
        <property name="removeAbandoned" value="${db.removeAbandoned}" />  
        <!-- 1800秒，也就是30分钟   -->
        <property name="removeAbandonedTimeout" value="${db.removeAbandonedTimeout}" />  
        <!-- 关闭abanded连接时输出错误日志  --> 
        <property name="logAbandoned" value="${db.logAbandoned}" />  
        <!-- 开启Druid的监控统计功能   -->
        <property name="filters" value="stat,Log4j2" />
         
        <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"/>
        <!-- <property name="maxOpenPreparedStatements" value="${db.maxOpenPreparedStatements}"/> -->
        
        <!-- 测试有效用的SQL Query -->     
        <property name="validationQuery" value="${db.validationQuery}" /> 
        <!-- 连接空闲时测试是否有效    -->
        <property name="testWhileIdle" value="true" />      
        <!-- 获取连接时测试是否有效     --> 
        <property name="testOnBorrow" value="false" />    
        <!-- 归还连接时是否测试有效    --> 
        <property name="testOnReturn" value="false" />    
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
            </list>
        </property>
    </bean>  
	
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">  
        <property name="slowSqlMillis" value="${db.slowSqlMillis}" />  
        <property name="mergeSql" value="true" />
        <property name="logSlowSql" value="true" />  
    </bean> 
    
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4j2Filter">
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" >
		<property name="persistenceUnitName" value="wepaysp-po" />
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">com.zbsp.wepaysp.api.hibernate.dialect.WepayDialect</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.jdbc.fetch_size">100</prop>
				<prop key="hibernate.jdbc.batch_size">30</prop>
				<prop key="hibernate.default_batch_fetch_size">16</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" >
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<aop:config>
		<aop:pointcut id="serviceMethod" expression="execution(* com.zbsp.wepaysp.api.service.*.impl.*.*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txtAdvice" />
	</aop:config>
	<tx:advice id="txtAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="doTrans*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="doNewTrans*" propagation="REQUIRES_NEW" rollback-for="Exception" />
			<tx:method name="doJoinTrans*" propagation="SUPPORTS" rollback-for="Exception" />
			<tx:method name="doMandTrans*" propagation="MANDATORY" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<bean id="commonORMDAO" class="com.zbsp.wepaysp.api.dao.impl.CommonDAOJPAImpl">
  	</bean>
  	
  	<bean id="baseService" class="com.zbsp.wepaysp.api.service.BaseService">
		<property name="commonDAO" ref="commonORMDAO" />
		<property name="transactionManager" ref="transactionManager" />
  	</bean>
  	
  	<!-- <bean id="springContextUtil" class="com.zbsp.wepaysp.manage.web.util.SpringContextUtil" /> -->
  	
	<import resource="service-context.xml" />
</beans>